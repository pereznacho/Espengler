"use strict";
const vue = require("vue");
const main = require("./main.js");
require("d3");
require("ajv");
const style = "";
const _hoisted_1 = {
  class: "gly-container",
  style: { "width": "100%", "height": "100%" }
};
const _sfc_main = /* @__PURE__ */ vue.defineComponent({
  __name: "GraphlyD3",
  props: {
    dark: {
      type: Boolean,
      default: false
    },
    remoteOrigin: {
      type: String,
      default: ""
    },
    selectedNodes: {
      type: Array,
      default: () => []
    },
    envGravity: {
      type: Number,
      default: -1e4
    },
    linkDistance: {
      type: Number,
      default: 400
    },
    animationDuration: {
      type: Number,
      default: 300
    },
    draggableNodes: {
      type: Boolean,
      default: true
    },
    zoomEnabled: {
      type: Boolean,
      default: true
    },
    zoomScaleExtent: {
      type: Array,
      default: () => [0.1, 3]
    }
  },
  emits: [
    "node-click",
    "node-double-click",
    "node-context-menu",
    "node-drag-start",
    "node-drag-move",
    "node-drag-end",
    "link-click",
    "link-double-click",
    "link-context-menu",
    "link-drag-start",
    "link-drag-move",
    "link-drag-end",
    "environment-click",
    "environment-double-click",
    "environment-context-menu",
    "environment-move",
    "theme-change",
    "simulation-tick",
    "simulation-tick-end"
  ],
  setup(__props, { expose, emit }) {
    const props = __props;
    let svg = vue.ref();
    let simulation = vue.ref(null);
    expose({
      simulation
    });
    vue.onMounted(() => {
      if (!svg.value)
        return;
      simulation.value = new main.ForceSimulation(svg.value);
      simulation.value.templateStore.remoteOrigin = props.remoteOrigin;
      simulation.value.selectedNodes = props.selectedNodes;
      simulation.value.envGravity = props.envGravity;
      simulation.value.linkDistance = props.linkDistance;
      simulation.value.animationDuration = props.animationDuration;
      simulation.value.draggableNodes = props.draggableNodes;
      simulation.value.zoomEnabled = props.zoomEnabled;
      simulation.value.zoomScaleExtent = [props.zoomScaleExtent[0], props.zoomScaleExtent[1]];
      simulation.value.on(main.Event.NodeClick, (e, node) => emit("node-click", e, node));
      simulation.value.on(main.Event.NodeDoubleClick, (e, node) => emit("node-double-click", e, node));
      simulation.value.on(main.Event.NodeContextMenu, (e, node) => emit("node-context-menu", e, node));
      simulation.value.on(
        main.Event.NodeDragStart,
        (e, node, position) => emit("node-drag-start", e, node, position)
      );
      simulation.value.on(
        main.Event.NodeDragMove,
        (e, node, position) => emit("node-drag-move", e, node, position)
      );
      simulation.value.on(
        main.Event.NodeDragEnd,
        (e, node, position) => emit("node-drag-end", e, node, position)
      );
      simulation.value.on(main.Event.LinkClick, (e, link) => emit("link-click", e, link));
      simulation.value.on(main.Event.LinkDoubleClick, (e, link) => emit("link-double-click", e, link));
      simulation.value.on(main.Event.LinkContextMenu, (e, link) => emit("link-context-menu", e, link));
      simulation.value.on(
        main.Event.LinkDragStart,
        (e, sourceNode, position) => emit("link-drag-start", e, sourceNode, position)
      );
      simulation.value.on(
        main.Event.LinkDragMove,
        (e, sourceNode, position) => emit("link-drag-move", e, sourceNode, position)
      );
      simulation.value.on(
        main.Event.LinkDragEnd,
        (e, sourceNode, targetNode, position) => emit("link-drag-end", e, sourceNode, targetNode, position)
      );
      simulation.value.on(
        main.Event.EnvironmentClick,
        (e, position) => emit("environment-click", e, position)
      );
      simulation.value.on(
        main.Event.EnvironmentDoubleClick,
        (e, position) => emit("environment-double-click", e, position)
      );
      simulation.value.on(
        main.Event.EnvironmentContextMenu,
        (e, position) => emit("environment-context-menu", e, position)
      );
      simulation.value.on(
        main.Event.EnvironmentMove,
        (transform) => emit("environment-move", transform)
      );
      simulation.value.on(main.Event.ThemeChange, (theme) => emit("theme-change", theme));
      simulation.value.on(main.Event.SimulationTick, () => emit("simulation-tick"));
      simulation.value.on(main.Event.SimulationTickEnd, () => emit("simulation-tick-end"));
    });
    vue.watch(
      () => props.remoteOrigin,
      () => {
        if (!simulation.value)
          return;
        simulation.value.templateStore.remoteOrigin = props.remoteOrigin;
      }
    );
    vue.watch(
      () => props.selectedNodes,
      () => {
        if (!simulation.value)
          return;
        simulation.value.selectedNodes = props.selectedNodes;
      }
    );
    vue.watch(
      () => props.envGravity,
      () => {
        if (!simulation.value)
          return;
        simulation.value.envGravity = props.envGravity;
      }
    );
    vue.watch(
      () => props.linkDistance,
      () => {
        if (!simulation.value)
          return;
        simulation.value.linkDistance = props.linkDistance;
      }
    );
    vue.watch(
      () => props.animationDuration,
      () => {
        if (!simulation.value)
          return;
        simulation.value.animationDuration = props.animationDuration;
      }
    );
    vue.watch(
      () => props.draggableNodes,
      () => {
        if (!simulation.value)
          return;
        simulation.value.draggableNodes = props.draggableNodes;
      }
    );
    vue.watch(
      () => props.zoomEnabled,
      () => {
        if (!simulation.value)
          return;
        simulation.value.zoomEnabled = props.zoomEnabled;
      }
    );
    vue.watch(
      () => props.zoomScaleExtent,
      () => {
        if (!simulation.value)
          return;
        simulation.value.zoomScaleExtent = [props.zoomScaleExtent[0], props.zoomScaleExtent[1]];
      }
    );
    return (_ctx, _cache) => {
      return vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [
        (vue.openBlock(), vue.createElementBlock("svg", {
          ref_key: "svg",
          ref: svg,
          style: { "width": "100%", "height": "100%" },
          class: vue.normalizeClass({ dark: props.dark })
        }, null, 2))
      ]);
    };
  }
});
module.exports = _sfc_main;
